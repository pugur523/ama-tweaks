plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT' apply false
    id 'maven-publish'
    // https://github.com/ReplayMod/preprocessor
    // https://github.com/Fallen-Breath/preprocessor
    id 'com.replaymod.preprocess' version 'ce1aeb2b'

    // https://github.com/Fallen-Breath/yamlang
    id 'me.fallenbreath.yamlang' version '1.4.0' apply false
}

preprocess {
    def mc1171  = createNode('1.17.1', 1_17_01, '')
    def mc1182  = createNode('1.18.2', 1_18_02, '')
    def mc1194 = createNode('1.19.4', 1_19_04, '')
    def mc1201 = createNode('1.20.1', 1_20_01, '')
    def mc1202 = createNode('1.20.2', 1_20_02, '')
    def mc1204 = createNode('1.20.4', 1_20_04, '')
    def mc1206 = createNode('1.20.6', 1_20_06, '')
    def mc1211  = createNode('1.21.1', 1_21_01, '')

    mc1201.link(mc1194, file('versions/mapping-1.20.1-1.19.txt') as File)
    mc1194.link(mc1182,  file('versions/mapping-1.19-1.18.txt') as File)
    mc1182.link(mc1171,  file('versions/mapping-1.18-1.17.txt') as File)

    mc1201.link(mc1202, file('versions/mapping-1.20.1-1.20.2.txt') as File)
    mc1202.link(mc1204, file('versions/mapping-1.20.2-1.20.4.txt') as File)
    mc1204.link(mc1206, file('versions/mapping-1.20.4-1.20.6.txt') as File)
    mc1206.link(mc1211, file('versions/mapping-1.20.6-1.21.1.txt') as File)
}

tasks.register('buildAndGather') {
    subprojects {
        dependsOn project.tasks.named('build').get()
    }
    doFirst {
        println 'Gathering builds'
        def buildLibs = {
            p -> p.buildDir.toPath().resolve('libs')
        }
        delete fileTree(buildLibs(rootProject)) {
            include '*'
        }
        subprojects {
            copy {
                from(buildLibs(project)) {
                    include '*.jar'
                    exclude '*-dev.jar', '*-sources.jar', '*-shadow.jar'
                }
                into buildLibs(rootProject)
                duplicatesStrategy DuplicatesStrategy.INCLUDE
            }
        }
    }
}

tasks.register('cleanPreprocessSources') {
    doFirst {
        subprojects {
            def path = project.projectDir.toPath().resolve('build/preprocessed')
            if (path.toFile().isDirectory()) {
                path.toFile().deleteDir()
            }
        }
    }
}